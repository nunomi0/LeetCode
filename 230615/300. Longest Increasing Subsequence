class Solution1 { // O(N^2)
public:
    int lengthOfLIS(vector<int>& nums) {
        int dp[10010];
        for (int i = 0; i<nums.size(); i++) dp[i]=1;
        for (int i = 0; i<nums.size(); i++){
            int mx=0;
            for (int j = 0; j<i; j++) if (nums[i]> nums[j]) mx=max(mx,dp[j]);
            dp[i]=mx+1;
        }
        
        int ans=0;
        for (int i = 0; i<nums.size(); i++) ans=max(ans,dp[i]);
        return ans;
    }
};


class Solution2 { // O(NlogN)
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> v;
        v.push_back(-99999);

        for (int i = 0; i<nums.size(); i++){
            if (v.back()<nums[i]) v.push_back(nums[i]);
            else{
                int s=1;
                int e=v.size()-1;

                while (s<=e){
                    int m=(s+e)/2;
                    if (v[m]<nums[i]) s=m+1;
                    else e=m-1;
                }
                v[s]=nums[i];
            }
        }
        return v.size()-1;
    }
};
